#!/usr/bin/env ruby
$:.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

developer_mode = false
developer_mode = true if __FILE__ == $0
require 'rubygems' if developer_mode

require 'validator'
require 'anemone'
require 'colorful_messages'
require 'validate_website'

include ColorfulMessages

validate_website = ValidateWebsite.new(ARGV)
options = validate_website.options

exit_code = 0

Anemone.crawl(options[:site],
              :user_agent     => options[:useragent],
              :authorization  => options[:auth],
              :cookies        => options[:cookies],
              :accept_cookies => options[:accept_cookies],
              :verbose        => options[:verbose]) do |anemone|

  anemone.skip_links_like Regexp.new(options[:exclude]) if options[:exclude]

  anemone.focus_crawl { |p|
    links = []
    if p.html?
      p.doc.css('img, script, iframe').each do |elem|
        url = validate_website.get_url(p, elem, "src")
        links << url unless url.nil?
      end
      p.doc.css('link').each do |link|
        url = validate_website.get_url(p, link, "href")
        links << url unless url.nil?
      end
    end
    links.uniq!
    p.links.concat(links)
  }

  anemone.on_every_page { |page|
    url = page.url.to_s

    # validate html/html+xml
    if page.html? && page.fetched?
      print info(url)
      validator = Validator.new(page)
      msg = " well formed? %s" % validator.valid?
      if validator.valid?
        puts success(msg)
      else
        exit_code = 1
        puts error(msg)
        validate_website.to_file(url)
      end
    end

    if options[:not_found] && page.not_found?
      exit_code = 1
      puts error("%s linked in %s but not exist" % [url, page.referer])
      validate_website.to_file(url)
    end
  }
end

exit(exit_code)
