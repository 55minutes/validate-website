#!/usr/bin/env ruby
$:.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

developer_mode = false
developer_mode = true if __FILE__ == $0
require 'rubygems' if developer_mode

require 'validator'
require 'anemone'
require 'colorful_messages'
require 'optparse'

include ColorfulMessages

# default options
OPTIONS = {
  :site        => 'http://localhost:3000/',
  :useragent   => Anemone::Core::DEFAULT_OPTS[:user_agent],
  :exclude     => nil,
  :file        => nil,
  :auth        => nil,
}

ARGV.options do |o|
  script_name = File.basename($0)
  o.set_summary_indent('  ')
  o.banner =    "Usage: #{script_name} [OPTIONS]"
  o.define_head "#{script_name} -  Web crawler for checking the validity of " +
    'your documents'
  o.separator   ""

  o.on("-s", "--site=val", String,
       "Default: #{OPTIONS[:site]}") { |v| OPTIONS[:site] = v }

  o.on("-u", "--useragent=val", String,
       "Default: #{OPTIONS[:useragent]}") { |v| OPTIONS[:useragent] = v }
  o.on("-e", "--exclude=val", String,
       "Url to exclude") { |v| OPTIONS[:exclude] = v }
  o.on("-f", "--file=val", String,
       "save not well formed urls") { |v| OPTIONS[:file] = v }
  o.on("--auth=[user,pass]", Array,
       "Basic http authentification") { |v| OPTIONS[:auth] = v }

  o.separator ""
  o.on_tail("-h", "--help", "Show this help message.") { puts o; exit }
  o.parse!
end

if OPTIONS[:file]
  file = OPTIONS[:file]
  open(file, 'w').write('')
end

exit_code = 0

Anemone.crawl(OPTIONS[:site],
              :user_agent => OPTIONS[:useragent],
              :authorization => OPTIONS[:auth]) do |anemone|

  anemone.skip_links_like Regexp.new(OPTIONS[:exclude]) if OPTIONS[:exclude]

  anemone.on_every_page { |page|
    next unless page.html?
    url = page.url.to_s
    print info(url)

    validator = Validator.new(page)
    msg = " well formed? %s" % validator.valid?
    if validator.valid?
      puts success(msg)
    else
      exit_code = 1
      puts error(msg)
      open(file, 'a').write("#{url}\n") if OPTIONS[:file]
    end
  }
end

exit(exit_code)
